{% comment %} {% load static %}
{% load crispy_forms_filters %}
{% load crispy_forms_tags %}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login Page</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="{% static "core/css/login.css" %}">
</head>
<body>
  <div class="container login-container">
    <div class="login-card row border ">
      <!-- Login Form -->
      <div class="col-lg-12 d-flex flex-column justify-content-center">
        <div class="login-form">
          <div class="login-icon">
            <i class="fas fa-sign-in-alt" style="color:#1E3A8A;"></i>
          </div>
          <h2 class="mb-4 text-center fw-bold" style="color:#1E3A8A;">UserRegistration</h2>

          {% if form.non_field_errors %}
            <div class="alert alert-danger text-center">
              {% for error in form.non_field_errors %}
                  <p class="text-danger">{{ error }}</p>
              {% endfor %}
            </div>                  
          {% endif %}

          <form method="POST" novalidate autocapitalize="password2">
            {% csrf_token %}
            <div class="mb-3">
              {{form.username|as_crispy_field}}
             </div>
            <div class="mb-3">

              <div class="input-group-append">
                {{form.password1|as_crispy_field }}
              </div>

              <div class="input-group-append">
                {{form.password2|as_crispy_field }}
              </div>

            </div>
            <button type="submit" class="btn btn-primary w-100 mb-3" style="background-color:#1E3A8A;">Login</button>
          </form>
        </div>
      </div>

    </div>
  </div>



  <!-- Bootstrap JS & Font Awesome -->
  <script src="https://kit.fontawesome.com/a076d05399.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Password Toggle Script -->  
</body>
</html>  {% endcomment %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Create Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .card {
            border-radius: 15px;
            padding: 20px;
            background-color: #fff;
        }
        .form-control {
            border-radius: 10px;
            padding: 10px 15px;
        }
        .input-group .btn {
            border-radius: 10px;
        }
        .btn-submit {
            background-color: #007bff;
            border: none;
            border-radius: 10px;
            color: #fff;
            font-weight: bold;
            padding: 10px 20px;
        }
        .btn-submit:hover {
            background-color: #0056b3;
        }
        .error-message {
            color: red;
            font-size: 0.9rem;
            margin-top: 5px;
        }
        .is-invalid {
            border-color: red;
        }
    </style>
</head>
<body>
    <div class="container py-5 d-flex justify-content-center">
        <div class="card shadow-lg" style="max-width: 400px; width: 100%;">
            <h3 class="text-center mb-4">Create User</h3>                         
            <form id="userForm" method='POST' novalidate>
                {% csrf_token %}
                <div class="mb-3">                    
                    {{form.first_name}}
                    {% comment %} <input type="text" class="form-control" id="firstName" placeholder="First Name" required> {% endcomment %}
                    <p id="firstNameError" class="error-message"></p>
                    <span class="error-message">{{form.first_name.errors}}</span>
                </div>
                <div class="mb-3">
                    {{form.last_name}}
                    {% comment %} <input type="text" class="form-control" id="lastName" placeholder="Last Name" required> {% endcomment %}
                    <p id="lastNameError" class="error-message"></p>
                    <span class="error-message">{{form.last_name.errors}}</span>
                </div>
                <div class="input-group mb-3">
                    {{form.username}}
                    <span class="input-group-text">{{random_suffix}}</span>
                </div>
                <p id="usernameError" class="error-message"></p>
                <span class="error-message">{{form.username.errors}}</span>  
                {% comment %} <div class="input-group mb-3">
                    <input type="text" class="form-control" id="username" placeholder="Username" required>
                    <span class="input-group-text">9234_pric</span>
                </div>
                <p id="usernameError" class="error-message"></p> {% endcomment %}
                <div class="mb-3">
                    {{form.email}}
                    {% comment %} <input type="email" class="form-control" id="email" placeholder="Email" required> {% endcomment %}
                    <p id="emailError" class="error-message"></p>
                    <span class="error-message">{{form.email.errors}}</span>
                </div>
                              
                <div class="mb-3">
                    <div class="input-group">
                        {{form.password}}          
                        {% comment %} <input type="password" class="form-control" id="password" placeholder="Password" required> {% endcomment %}
                        <button type="button" class="btn btn-outline-secondary" id="togglePassword">
                            <i class="bi bi-eye"></i>
                        </button>
                    </div>
                    <span class="error-message">{{form.password.errors}}</span>
                </div>
                <button type="submit" class="btn btn-submit w-100">Submit</button>
            </form>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>    
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const firstNameInput = document.getElementById("firstName");
            const lastNameInput = document.getElementById("lastName");
            const usernameInput = document.getElementById("username");
            const emailInput = document.getElementById("email");
            const passwordInput = document.getElementById("password");
            const togglePasswordBtn = document.getElementById("togglePassword");
            const usernameError = document.getElementById("usernameError");
            const firstNameError = document.getElementById("firstNameError");
            const lastNameError = document.getElementById("lastNameError");
            const emailError = document.getElementById("emailError");
            const form = document.getElementById("myForm");  // Add your form ID here
    
            // Toggle password visibility
            togglePasswordBtn.addEventListener("click", () => {
                const type = passwordInput.getAttribute("type") === "password" ? "text" : "password";
                passwordInput.setAttribute("type", type);
                togglePasswordBtn.innerHTML = type === "text" 
                    ? '<i class="bi bi-eye-slash"></i>' 
                    : '<i class="bi bi-eye"></i>';
            });
    
            // Update username field based on first name and last name inputs
            function updateUsername() {
                const firstName = firstNameInput.value.trim().toLowerCase();
                const lastName = lastNameInput.value.trim().toLowerCase();
                
                // Update username in the format 'firstname.lastname'
                if (firstName && lastName) {
                    usernameInput.value = `${firstName}.${lastName}`;
                } else if (firstName) {
                    usernameInput.value = `${firstName}`;  // If only first name exists
                } else if (lastName) {
                    usernameInput.value = `${lastName}`;  // If only last name exists
                } else {
                    usernameInput.value = '';  // If both are empty
                }
            }
    
            // Call updateUsername whenever first name or last name changes
            firstNameInput.addEventListener("input", updateUsername);
            lastNameInput.addEventListener("input", updateUsername);
    
            // Validate first name
            firstNameInput.addEventListener("input", () => {
                const value = firstNameInput.value;
                const isValid = /^[a-zA-Z]+$/.test(value);
    
                if (!isValid) {
                    firstNameError.textContent = "First name can only contain letters.";
                    firstNameInput.classList.add("is-invalid");
                } else {
                    firstNameError.textContent = "";
                    firstNameInput.classList.remove("is-invalid");
                }
            });
    
            // Validate last name
            lastNameInput.addEventListener("input", () => {
                const value = lastNameInput.value;
                const isValid = /^[a-zA-Z]+$/.test(value);
    
                if (!isValid) {
                    lastNameError.textContent = "Last name can only contain letters.";
                    lastNameInput.classList.add("is-invalid");
                } else {
                    lastNameError.textContent = "";
                    lastNameInput.classList.remove("is-invalid");
                }
            });
    
            // Validate username input (allowing lowercase letters and period)
            usernameInput.addEventListener("input", () => {
                const value = usernameInput.value;
                const isValid = /^[a-z]+\.[a-z]+$/.test(value); // Validates the pattern: firstname.lastname (both lowercase)
    
                if (!isValid) {
                    usernameError.textContent = "Username must be in the format firstname.lastname (all lowercase).";
                    usernameInput.classList.add("is-invalid");
                } else {
                    usernameError.textContent = "";
                    usernameInput.classList.remove("is-invalid");
                }
    
                // Enforce lowercase and correct format
                usernameInput.value = value.toLowerCase();
            });
    
            // Validate email input
            emailInput.addEventListener("input", () => {
                const value = emailInput.value;
                const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                const isValid = emailRegex.test(value);
    
                if (!isValid) {
                    emailError.textContent = "Please enter a valid email address.";
                    emailInput.classList.add("is-invalid");
                } else {
                    emailError.textContent = "";
                    emailInput.classList.remove("is-invalid");
                }
            });
    
            // Form submission validation
            form.addEventListener("submit", (event) => {
                let isFormValid = true;
    
                // Check if any input has errors
                if (firstNameInput.classList.contains("is-invalid") || 
                    lastNameInput.classList.contains("is-invalid") || 
                    usernameInput.classList.contains("is-invalid") || 
                    emailInput.classList.contains("is-invalid")) {
                    isFormValid = false;
                }    
                // Prevent form submission if there are validation errors
                if (!isFormValid) {
                    event.preventDefault();  // Prevent form from submitting
                    alert("Please fix the errors in the form before submitting.");
                }
                // Proceed with AJAX form submission
                const formData = new FormData(form);
                
                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        // If submission is successful, close the window
                        alert("Form successfully submitted!");
                        window.close();
                    } else {
                        alert("Submission failed: " + (data.message || "An error occurred"));
                    }
                })
                .catch(error => {
                    alert("There was a problem with the submission. Please try again.");
                });
            });                                                     

        });      
            
    </script>

<script>
    document.getElementById('create-form').addEventListener('submit', function(event) {
        event.preventDefault();  // Prevent the default form submission
        
        // Get the form data
        const formData = new FormData(this);

        // Send the form data using Fetch API
        fetch('', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            }
        })
        .then(response => response.json())  // Expecting JSON response
        .then(data => {
            if (data.status === 'success') {
                alert(data.message);  // Alert the success message
                window.close();  // Close the window/tab
            } else {
                alert('Something went wrong.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred.');
        });
    });
</script>
    

</body>
</html>
