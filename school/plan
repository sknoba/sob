in firefox it's promting for save password i don't want this thig

if save form with some field and open new usercreation form i'ts opening


from django.contrib.admin.models import LogEntry
def log(request):
    logs = LogEntry.objects.all()
    return render(request, 'attendance/log.html',)



#Permission denied

# In a Django project, handling permission errors like "permission denied" can be done through various mechanisms. Typically, this happens when users try to access resources or perform actions that they don't have the right permissions for. You can customize the error message for this scenario using Django’s built-in features.

# Here's how you can manage and display a `permission_denied_message` in your Django project:

# ### 1. **Using `PermissionDenied` Exception**

# Django provides the `PermissionDenied` exception in `django.core.exceptions` that you can raise when a user tries to access a view or resource they don't have permission for.

# #### Example:

# In your view, you can raise the `PermissionDenied` exception when needed:

# ```python
# from django.core.exceptions import PermissionDenied
# from django.shortcuts import render

# def my_view(request):
#     if not request.user.has_perm('some_permission'):
#         raise PermissionDenied("You do not have permission to access this page.")
#     return render(request, 'my_template.html')
# ```

# Here, if the user doesn't have the required permission, a `PermissionDenied` exception is raised and Django will return a default 403 Forbidden response with the message you provided ("You do not have permission to access this page.").

# ### 2. **Customizing the 403 Error Page**

# You can create a custom 403 error page that will display a specific message to the user. 

# #### Steps:

# - First, create a custom `403.html` template in your templates folder:

# ```html
# <!-- templates/403.html -->
# <!DOCTYPE html>
# <html>
# <head>
#     <title>Permission Denied</title>
# </head>
# <body>
#     <h1>Permission Denied</h1>
#     <p>You do not have permission to access this page. Please contact the administrator if you believe this is an error.</p>
# </body>
# </html>
# ```

# - Then, you need to ensure that Django uses this custom template by modifying the `settings.py` file:

# ```python
# # settings.py
# DEBUG = False  # Make sure DEBUG is False in production

# ALLOWED_HOSTS = ['yourdomain.com']  # Replace with your domain

# # Enable custom error pages
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Ensure your templates folder is included
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
# ```

# With this setup, any time a `PermissionDenied` exception is raised (or a 403 status is returned), Django will serve the `403.html` page.

# ### 3. **Using `@login_required` or Custom Decorators**

# If you're restricting access based on login or user permissions, Django provides built-in decorators to help manage access control.

# #### Example: Using `@login_required` decorator

# ```python
# from django.contrib.auth.decorators import login_required

# @login_required
# def my_view(request):
#     return render(request, 'my_template.html')
# ```

# This will automatically redirect users who are not logged in to the login page. You can also customize the login redirect URL by specifying the `LOGIN_URL` in your `settings.py`:

# ```python
# # settings.py
# LOGIN_URL = '/login/'  # Customize as needed
# ```

# #### Example: Using a Custom Permission Decorator

# You can create a custom decorator to check if a user has a specific permission.

# ```python
# from django.core.exceptions import PermissionDenied
# from django.contrib.auth.decorators import login_required

# def permission_required(permission):
#     def decorator(view_func):
#         def _wrapped_view(request, *args, **kwargs):
#             if not request.user.has_perm(permission):
#                 raise PermissionDenied("You do not have permission to access this resource.")
#             return view_func(request, *args, **kwargs)
#         return _wrapped_view
#     return decorator

# # Example usage
# @permission_required('app_name.permission_name')
# def my_view(request):
#     return render(request, 'my_template.html')
# ```

# This decorator will raise a `PermissionDenied` exception if the user does not have the required permission.

# ### 4. **Logging Permission Denied Errors**

# If you want to log when a user tries to access something they don't have permission to, you can use Django’s logging system to log such events.

# #### Example:

# In your views or middleware, you can add logging:

# ```python
# import logging
# from django.core.exceptions import PermissionDenied

# logger = logging.getLogger(__name__)

# def my_view(request):
#     if not request.user.has_perm('some_permission'):
#         logger.warning(f"Permission denied for user {request.user.username} at {request.path}")
#         raise PermissionDenied("You do not have permission to access this page.")
#     return render(request, 'my_template.html')
# ```

# Make sure you configure logging in your `settings.py`:

# ```python
# # settings.py
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'WARNING',
#             'class': 'logging.FileHandler',
#             'filename': 'permission_denied.log',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'WARNING',
#             'propagate': True,
#         },
#     },
# }
# ```

# ### 5. **Django Admin Custom Permissions**

# If you're working within the Django Admin interface, you can override the `has_permission()` method in your models or admin classes to restrict access based on custom logic.

# For example:

# ```python
# from django.contrib import admin
# from django.core.exceptions import PermissionDenied

# class MyModelAdmin(admin.ModelAdmin):
#     def has_change_permission(self, request, obj=None):
#         if not request.user.has_perm('app_name.change_mymodel'):
#             raise PermissionDenied("You do not have permission to change this object.")
#         return super().has_change_permission(request, obj)

# admin.site.register(MyModel, MyModelAdmin)
# ```

# ### Conclusion

# - Use `PermissionDenied` for raising explicit permission-related errors.
# - Customize your error templates for better user experience (like a custom 403 page).
# - Leverage Django’s decorators (`@login_required`, `@permission_required`) to simplify access control.
# - Optionally log permission-related events for debugging and security monitoring.

# This should cover how to handle permission denied errors and customize messages in a Django project. If you have any specific implementation questions or need further help, feel free to ask!









School Mangement System (SMS)

    - Student
    - Teacher
    - Class
    - Section
    - Subject
    - Exam
    - Marks
    - Attendance
    - Fee
    - Notice
    - Event
    - Report Card
    - Result
    - User
    - Role
    - Permission
    - Setting
    - Backup
    - Restore
    - Archive   
    - Academic Year

    - Enrollment / Admission
    - Fees Management
    - Attendance Management
    - Performance Management
    - Report Card Generation
    - Result Generation
    - User Management
    - Role Management
    - Permission Management
    - Setting Management
    - Backup Management
    - Restore Management
    - Archive Management
    - Academic Year Management

    - Role Based Access Control (RBAC)
    - Permission Based Access Control (PBAC)

    - Backup and Restore Functionality
    - Archive Functionality

    - Academic Year wise data management
    - Academic Year wise data backup and restore
    - Academic Year wise data archive

    - User Management
    - Role Management
    - Permission Management
    - Setting Management

    - Student Management
    - Teacher Management
    - Class Management
    - Section Management
    - Subject Management
    - Exam Management
    - Marks Management
    - Attendance Management
    - Fee Management
    - Notice Management
    - Event Management
    - Report Card Management
    - Result Management

    - Enrollment / Admission
    - Fees Management
    - Attendance Management
    - Performance Management
    - Report Card Generation
    - Result Generation

    - Backup Management
    - Restore Management
    - Archive Management

    - Academic Year Management

    - User Management
    - Role Management
    - Permission Management
    - Setting Management

    - Student Management
    - Teacher Management
    - Class Management
    - Section Management
    - Subject Management
    - Exam Management
    - Marks Management
    - Attendance Management
    - Fee Management
    - Notice Management
    - Event Management
    - Report Card Management
    - Result Management

    - Enrollment / Admission
    - Fees Management
    - Attendance Management
    - Performance Management
    - Report Card Generation
    - Result Generation

    - Backup Management
    - Restore Management
    - Archive Management

    - Academic Year Management








All all application data manage by Academic year(session) wise like 2024-2025 etc.

1. Backup and Restore Functionality for all data in application 
2. Can backup current academic (session) year data, Can delete  the previous academic year(session), Can reupload the previous academic year data if needed without mixing it with the current session data
3. can archive previous academic year data if want to download or upload data  
4. during academic year do not allow to delete any data, only allow to update data and add new data 
5. Can create new academic year(session) and can copy the previous academic year data to the new academic year(session)


Thre will be three type of user in the system:
    Role Based Access Control (RBAC) and Permission Based Access Control (PBAC)
    
    Role:
    1. Principal [can do all the things] can give anyone permission to do anything
    2. Management Staff [fees managenet admission, ]
    3. Teachers [attendance, marks, exam, report card]

    Permission:
        any other permission which is not voided by the role based access control


There will be Mangement of Data of following entities:
    - Student
    - Teacher
    - Class
    - Section
    - Subject
    - Exam
    - Marks
    - Attendance
    - Fee
    - Notice
    - Event
    - Report Card
    - Result
    - User
    - Role
    - Permission
    - Setting
    - Backup
    - Restore
    - Archive   
    - Academic Year

    
Process Flow:

    Enrollment / Admission
    can make admission of student by filling the form by management staff or principal
    Fill Student Details and Parent Details all essential details including class and section and student id
    fill fees detail
    admission successfull 

    Fees Management:
    can add fees of student class wise only by management staff or principal
    student or parents will pay the fees and fees will be updated in the system
    it will work as installment wise fees payment each wil a invoince will be generated and will be updated in the system


    Attendance Management:
    can take attendance of student class wise only by teacher who has permission to take attendance and who is classteacher or any other staff managemetn member whos has Permission


    Performance Management:
    can add marks of student class wise only by teacher who has permission to add marks and who is classteacher or any other staff managemetn member whos has Permission



































    
    
