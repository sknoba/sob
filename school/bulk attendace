To implement the functionality of creating bulk attendance records after submitting the HTML form, you'll need to follow these steps:

1. **Form Handling**: The form will contain checkboxes to mark attendance. Once the form is submitted, we will process it to create attendance records for the students.

2. **Attendance Creation**: The `Attendance` model will be created for the specific class on the selected date. For each student, an `AttendaceRecord` will be created, which will record whether the student was present, absent, or late.

3. **Bulk Create**: Instead of creating each record one by one, you can use Django's `bulk_create` method for efficiency when inserting multiple `AttendaceRecord` instances.

### Steps:

1. **HTML Form**: The HTML form already has checkboxes to mark students as present. We need to capture that data when the form is submitted.

2. **View Logic**: You need a view that processes the form submission, creates the attendance record, and then creates attendance records for the students.

3. **Attendance View**: We will modify the `MarkAttendanceView` to handle both the display and submission of the attendance data.

4. **Model Modification (if needed)**: Based on your current models, everything seems in place.

---

### Updated View for Handling Attendance Submission

```python
from django.shortcuts import render, redirect
from django.views import View
from django.utils.timezone import localtime
from django.contrib import messages
from .models import Attendance, AttendaceRecord, Class, Enrollment
from django.contrib.auth.models import User
from datetime import datetime

class MarkAttendanceView(View):
    template_name = 'attendance/mark_attendance.html'

    def get(self, request, class_id):
        # Fetch the class and related students
        current_ay = AcademicYear.objects.get(start_date__lte=date.today(), end_date__gte=date.today())
        students = Enrollment.objects.filter(academic_year=current_ay, standard_id=class_id)

        # Return the form for marking attendance
        return render(request, self.template_name, {'students': students, 'class_id': class_id})

    def post(self, request, class_id):
        # Get the class and date from the form
        a_class = Class.objects.get(id=class_id)
        date = datetime.now()

        # Check if an attendance record already exists for this class and date
        if Attendance.objects.filter(a_class=a_class, date__date=date.date()).exists():
            messages.error(request, "Attendance for this class on today's date has already been marked.")
            return redirect('mark_attendance', class_id=class_id)

        # Create the Attendance object
        attendance = Attendance(
            a_class=a_class,
            date=date,
            created_by=request.user
        )
        attendance.save()

        # Prepare the attendance records for bulk create
        attendance_records = []
        for student in Enrollment.objects.filter(academic_year=current_ay, standard_id=class_id):
            # Determine attendance status based on checkbox
            status = 'Present' if f'student_{student.id}' in request.POST else 'Absent'
            attendance_record = AttendaceRecord(
                student=student.student,
                attendance=attendance,
                status=status
            )
            attendance_records.append(attendance_record)

        # Bulk create all the attendance records at once
        AttendaceRecord.objects.bulk_create(attendance_records)

        # Success message
        messages.success(request, "Attendance has been successfully marked for this class.")
        return redirect('mark_attendance', class_id=class_id)

```

---

### Updates to HTML Template

You will need to include hidden input fields for each student's attendance status and ensure that the checkboxes are named properly for processing in the view.

1. **Form Modifications**:
   - Add `student_id` in the form name for each checkbox so we can track which students are marked as present.

```html
<form method="post">
    {% csrf_token %}
    <div class="container my-5">
        <h1 class="text-center mb-4">Mark Attendance</h1>
        <div class="table-responsive">
            <table class="table table-bordered text-center">
                <thead>
                    <tr>
                        <th>R No.</th>
                        <th>Name</th>
                        <th>Gender</th>
                        <th>Attendance</th>
                    </tr>
                </thead>
                <tbody>
                    {% for student in students %}
                    <tr id="row{{ student.student.id }}">
                        <td>{{ forloop.counter }}</td>
                        <td>{{ student.student.first_name }}</td>
                        <td>{{ student.student.gender }}</td>
                        <td>
                            <label class="form-switch">
                                <input type="checkbox" name="student_{{ student.id }}" value="Present">
                            </label>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        <button type="submit" class="btn btn-primary mt-3">Submit Attendance</button>
    </div>
</form>
```

### Explanation of Changes:

- **Form Name**: We dynamically assign names like `student_{{ student.id }}` to each checkbox. This helps us identify which students are marked as present when the form is submitted.

- **Attendance Status**: In the `post` method of the view, the status is determined by whether the checkbox is present in the `request.POST` data. If the checkbox is checked for a student, that student is marked as `Present`; otherwise, they are marked as `Absent`.

- **Bulk Create**: We gather all the `AttendaceRecord` instances in a list and use `bulk_create` to insert all the records at once for performance.

---

### Notes:

1. **Validation**: We ensure that an attendance record for the class and date doesn't already exist to prevent duplicates.

2. **Error Handling**: If the attendance for that class has already been marked, we notify the user via a Django message.

3. **Messages**: I added success and error messages that will show up in the template, so users know if the process was successful or not.

4. **Checkbox Status**: The status of each student is derived directly from the presence or absence of a checkbox for that student in the `POST` data.

---

This should handle the marking of attendance for a class and create the corresponding records in the `AttendaceRecord` model for each student.